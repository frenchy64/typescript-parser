(*The syntax of this file should be mostly self explanatory if you understand EBNF 
  and regular expressions, The one unique feature is that a literal or a rule
  can be excluded from the resulting parse tree by surronding it with angle brackets*)
<S> ::= DeclarationSourceFile
TypeParameters ::= <'<'> TypeParameter (<','> TypeParameter)* <'>'>
TypeParameter ::= ws-opt Identifier [ws Constraint] ws-opt
Identifier ::= #"[$_\p{L}][$_\p{L}\p{N}]*"
Constraint ::= <'extends'> ws Type
Type ::= TypeLiteral
       | TypeReference
       | TypeQuery
       | PredefinedType

PredefinedType ::= "any"
                 | "number"
                 | "boolean"
                 | "string"
                 | "void"
TypeReference ::= QualifiedIdentifier [ws-opt TypeArguments]
QualifiedIdentifier ::= Identifier
                      | ModuleName <'.'> Identifier
(*This isn't really necessary, but it's useful to seperate the module name*)
ModuleName ::= Identifier [<'.'> Identifier]*
TypeArguments ::= <'<'> TypeArgumentList <'>'>
TypeArgumentList ::= TypeArgument (<','> TypeArgument)*
TypeArgument ::= ws-opt Type ws-opt
TypeQuery ::= <"typeof"> ws QualifiedIdentifier
TypeLiteral ::= ObjectType
              | ArrayType
              | FunctionType
              | ConstructorType
ArrayType ::= ElementType lbrace rbrace
<ElementType> ::= TypeQuery
                | TypeReference
                | PredefinedType
                | ObjectType
                | ArrayType
FunctionType ::= 
  [TypeParameters] lparen [Parameter-List] rparen "=>" ws-opt Type
ConstructorType ::= <"new"> ws FunctionType
ObjectType ::= <'{'> ws-opt [TypeBody] ws-opt <'}'>
TypeBody ::= TypeMemberList ws-opt [<';'>]
TypeMemberList ::= TypeMember ws-opt [<';'> ws-opt TypeMember]*
TypeMember ::= PropertySignature
              | CallSignature
              | ConstructSignature
              | IndexSignature
              | MethodSignature
PropertySignature ::= PropertyName ws-opt ['?'] ws-opt [TypeAnnotation]
PropertyName ::= Identifier
               | StringLiteral
               | NumericLiteral
CallSignature ::= 
  [TypeParameters] lparen [Parameter-List] rparen [TypeAnnotation]
Parameter-List ::= 
    RequiredParameterList
  | OptionalParameterList
  | RestParameter
  | RequiredParameterList comma OptionalParameterList
  | RequiredParameterList comma RestParameter
  | OptionalParameterList comma RestParameter
  | RequiredParameterList comma OptionalParameterList comma RestParameter
<RequiredParameterList> ::= RequiredParameter (comma RequiredParameter)* ws-opt
RequiredParameter ::= 
    [#"public|private"] Identifier [TypeAnnotation]
  | Identifier ':' StringLiteral
<OptionalParameterList> ::= OptionalParameter (comma OptionalParameter)* ws-opt
OptionalParameter ::= 
    [#"public|private" ws] Identifier <'?'> [TypeAnnotation]
  | [#"public|private" ws] Identifier [TypeAnnotation] Initialiser
Initialiser ::= equals LiteralValue
RestParameter ::= "..." Identifier [TypeAnnotation] ws-opt
ConstructSignature ::= "new" ws CallSignature
IndexSignature ::= 
  lbrace Identifier ws-opt ':' ws-opt #"string|number" rbrace TypeAnnotation
MethodSignature ::= PropertyName ['?'] CallSignature
TypeAnnotation ::= ws-opt <':'> ws Type
InterfaceDeclaration ::= 
  <"interface"> ws Identifier [TypeParameters] [InterfaceExtendsClause] ws-opt ObjectType
InterfaceExtendsClause ::= <"extends"> ClassOrInterfaceTypeList
ClassOrInterfaceTypeList ::= 
  TypeReference (comma TypeReference)* ws-opt
ClassHeritage ::= [ClassExtendsClause] [ImplementsClause]
ClassExtendsClause ::= "extends" ws TypeReference
ImplementsClause ::= "implements" ws ClassOrInterfaceTypeList
<DeclarationSourceFile> ::= ws-opt | DeclarationElement*
DeclarationElement ::= ExportAssignment
                     | [<"export"> ws] ws-opt InterfaceDeclaration
                     | [<"export"> ws] ws-opt ImportDeclarartion
                     | [<"export"> ws] ws-opt ExternalImportDeclaration
                     | [<"export"> ws] ws-opt AmbientDeclaration
ImportDeclarartion ::= "import" ws Identifier equals QualifiedIdentifier ';'
ExternalImportDeclaration ::= 
  "import" ws Identifier equals ExternalModuleReference <';'>
ExternalModuleReference ::= 
  "require" lparen StringLiteral rparen
ExportAssignment ::= "export" equals Identifier <';'>
<AmbientDeclaration> ::= <"declare"> ws AmbientVariableDeclaration
                       | <"declare"> ws AmbientFunctionDeclaration
                       | <"declare"> ws AmbientClassDeclaration
                       | <"declare"> ws AmbientEnumDeclaration
                       | <"declare"> ws AmbientModuleDeclaration
                       | <"declare"> ws AmbientExternalModuleDeclaration
AmbientVariableDeclaration ::= <"var"> ws Identifier [TypeAnnotation]
AmbientFunctionDeclaration ::= <"function"> ws Identifier ws-opt CallSignature <';'>
AmbientClassDeclaration ::=
  <"class"> ws Identifier [TypeParameters] ClassHeritage <'{'> AmbientClassBody <'}'>
AmbientClassBody ::= AmbientClassBodyElement*
AmbientClassBodyElement ::= AmbientConstructorDeclaration
                           | AmbientPropertyMemberDeclaration
                           | IndexSignature
AmbientConstructorDeclaration ::= <"constructor"> ws '(' [Parameter-List] ')' <';'>
AmbientPropertyMemberDeclaration ::=
  [#"public|private" ws] ["static" ws] PropertyName [TypeAnnotation] <';'>
  [#"public|private" ws] ["static" ws] PropertyName CallSignature <';'>
AmbientEnumDeclaration ::= "enum" Identifier '{' [AmbientEnumBody] '}'
AmbientEnumBody ::= AmbientEnumMember [',' AmbientEnumMember]* [',']
AmbientEnumMember ::= PropertyName [equals #"[0-9]+|0x\p{XDigit}+"]
AmbientModuleDeclaration ::= 
  "module" QualifiedIdentifier '{' AmbientModuleBody '}'
AmbientModuleBody ::= AmbientModuleElement*
AmbientModuleElement ::= [<"export">] ws AmbientVariableDeclaration
                       | [<"export">] ws AmbientFunctionDeclaration
                       | [<"export">] ws AmbientClassDeclaration
                       | [<"export">] ws AmbientEnumDeclaration
                       | [<"export">] ws AmbientModuleDeclaration
                       | [<"export">] ws AmbientExternalModuleDeclaration
                       | [<"export">] ws ImportDeclarartion
AmbientExternalModuleDeclaration ::= 
  "module" StringLiteral '{' AmbientExternalModuleBody '}'
AmbientExternalModuleBody ::= AmbientExternalModuleElement*
AmbientExternalModuleElement ::= AmbientModuleElement
                               | ExportAssignment
                               | [<"export">] ws ExternalImportDeclaration

LiteralValue ::= #"true|false"
               | "null"
               | StringLiteral
               | NumericLiteral
StringLiteral ::=
  #"(['\"])([^\"']*|\\[\n\r\u2028\u2029]|(\\[\'\"bfnrtv]|x\p{XDigit}{2}|u\p{XDigit}{4}))*\1"
NumericLiteral ::=
  (*Decimal: optional integer followed by optional '.' followed by mandatory
  integer followed by optional exponent*)
  #"((?:(?:[0-9]*)?\.?[0-f]+(?:[Ee][-+]?[0-9]+))|0[Xx]\p{XDigit}+)"
<SingleLineComment> ::= "//" #".*[\n\r\u2028\u2029]"
<SeperatingWhitespace> ::= <#"[\p{Zs}\t\v\xA0\x20\x0C]">
<LineTerminator> ::= <#"[\n\r\u2028\u2029]">
<Whitespace> ::= <(#"[\p{Zs}\t\v\xA0\x20\x0C]|[\n\r\u2028\u2029]" | SingleLineComment)>
(*these are all for making the grammer easer to read*)

<ws> ::= Whitespace+
<ws-opt> ::= Whitespace*
<ws-sep> ::= SeperatingWhitespace+
<lparen> ::= ws-opt <'('> ws-opt
<rparen> ::= ws-opt <')'> ws-opt
<lbrace> ::= ws-opt <'['> ws-opt
<rbrace> ::= ws-opt <']'> ws-opt
<comma>  ::= ws-opt <','> ws-opt
<equals> ::= ws-opt <'='> ws-opt
